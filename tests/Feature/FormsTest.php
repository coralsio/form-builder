<?php

namespace Tests\Feature;

use Corals\Modules\FormBuilder\Models\Form;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class FormsTest extends TestCase
{
    use DatabaseTransactions;

    protected $form;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();
        Auth::loginUsingId($user->id);
    }

    public function test_forms_store()
    {
        $actions = ['show_message', 'redirect_to'];
        $action = array_rand($actions);
        $code = uniqid('form-');
        $response = $this->post(
            'form-builder/forms',
            [
                "name" => 'form',
                "short_code" => $code,
                "status" => "active",
                "content" => "[[]]",
                "form_actions" => [
                    "email" => [
                        "NqYCd7" => [
                            "to" => "action_form@gmail.com",
                            "subject" => "email",
                            "body" => "email",
                        ],
                    ],
                ],
                "submission" => [
                    "on_success" => [
                        "action" => $actions[$action],
                        "content" => "on success",
                    ],
                    "on_failure" => [
                        "action" => $actions[$action],
                        "content" => "on failure",
                    ],
                ],
                "is_public" => false,
            ]
        );

        $this->form = Form::query()->where('short_code', $code)->first();

        $response->assertDontSee('The given data was invalid')
            ->assertRedirect('form-builder/forms');

        $this->assertDatabaseHas('forms', [
            'name' => $this->form->name,
            'short_code' => $this->form->short_code,
        ]);
    }

    public function test_forms_show()
    {
        $this->test_forms_store();
        if ($this->form) {
            $response = $this->get('form-builder/forms/' . $this->form->hashed_id);

            $response->assertViewIs('FormBuilder::forms.show')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_forms_edit()
    {
        $this->test_forms_store();
        if ($this->form) {
            $response = $this->get('form-builder/forms/' . $this->form->hashed_id . '/edit');

            $response->assertViewIs('FormBuilder::forms.create_edit')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_forms_update()
    {
        $this->test_forms_store();

        if ($this->form) {
            $actions = ['show_message', 'redirect_to'];
            $action = array_rand($actions);
            $response = $this->put('form-builder/forms/' . $this->form->hashed_id, [
                "name" => $this->form->name,
                "short_code" => $this->form->short_code,
                "status" => $this->form->status,
                "content" => $this->form->content,
                "form_actions" => [
                    "email" => [
                         [
                            "to" => "action_form@gmail.com",
                            "subject" => "email",
                            "body" => "email",
                        ],
                    ],
                ],
                "submission" => [
                    "on_success" => [
                        "action" => $actions[$action],
                        "content" => "on success",
                    ],
                    "on_failure" => [
                        "action" => $actions[$action],
                        "content" => "on failure",
                    ],
                ],
                "is_public" => false,
            ]);

            $response->assertRedirect('form-builder/forms');
            $this->assertDatabaseHas('forms', [
                'name' => $this->form->name,
                'short_code' => $this->form->short_code,
            ]);
        }

        $this->assertTrue(true);
    }

    public function test_forms_delete()
    {
        $this->test_forms_store();

        if ($this->form) {
            $response = $this->delete('form-builder/forms/' . $this->form->hashed_id);

            $response->assertStatus(200)->assertSeeText('Form has been deleted successfully.');

            $this->isSoftDeletableModel(Form::class);
            $this->assertDatabaseMissing('forms', [
                'name' => $this->form->name,
                'short_code' => $this->form->short_code,
            ]);
        }
        $this->assertTrue(true);
    }
}
